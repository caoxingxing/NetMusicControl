// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlbumSendPackage.proto

package sungeo.netmusic.protocol;

public final class AlbumSendPackage {
  private AlbumSendPackage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class UserDevAlbum extends
      com.google.protobuf.GeneratedMessage {
    // Use UserDevAlbum.newBuilder() to construct.
    private UserDevAlbum() {
      initFields();
    }
    private UserDevAlbum(boolean noInit) {}
    
    private static final UserDevAlbum defaultInstance;
    public static UserDevAlbum getDefaultInstance() {
      return defaultInstance;
    }
    
    public UserDevAlbum getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sungeo.netmusic.protocol.AlbumSendPackage.internal_static_UserDevAlbum_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sungeo.netmusic.protocol.AlbumSendPackage.internal_static_UserDevAlbum_fieldAccessorTable;
    }
    
    public static final class AlbumPackage extends
        com.google.protobuf.GeneratedMessage {
      // Use AlbumPackage.newBuilder() to construct.
      private AlbumPackage() {
        initFields();
      }
      private AlbumPackage(boolean noInit) {}
      
      private static final AlbumPackage defaultInstance;
      public static AlbumPackage getDefaultInstance() {
        return defaultInstance;
      }
      
      public AlbumPackage getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return sungeo.netmusic.protocol.AlbumSendPackage.internal_static_UserDevAlbum_AlbumPackage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return sungeo.netmusic.protocol.AlbumSendPackage.internal_static_UserDevAlbum_AlbumPackage_fieldAccessorTable;
      }
      
      // optional int32 album_id = 1;
      public static final int ALBUM_ID_FIELD_NUMBER = 1;
      private boolean hasAlbumId;
      private int albumId_ = 0;
      public boolean hasAlbumId() { return hasAlbumId; }
      public int getAlbumId() { return albumId_; }
      
      // optional string album_num = 2;
      public static final int ALBUM_NUM_FIELD_NUMBER = 2;
      private boolean hasAlbumNum;
      private java.lang.String albumNum_ = "";
      public boolean hasAlbumNum() { return hasAlbumNum; }
      public java.lang.String getAlbumNum() { return albumNum_; }
      
      // optional string song_id = 3;
      public static final int SONG_ID_FIELD_NUMBER = 3;
      private boolean hasSongId;
      private java.lang.String songId_ = "";
      public boolean hasSongId() { return hasSongId; }
      public java.lang.String getSongId() { return songId_; }
      
      // optional int32 song_count = 4;
      public static final int SONG_COUNT_FIELD_NUMBER = 4;
      private boolean hasSongCount;
      private int songCount_ = 0;
      public boolean hasSongCount() { return hasSongCount; }
      public int getSongCount() { return songCount_; }
      
      // optional string dev_serial = 5;
      public static final int DEV_SERIAL_FIELD_NUMBER = 5;
      private boolean hasDevSerial;
      private java.lang.String devSerial_ = "";
      public boolean hasDevSerial() { return hasDevSerial; }
      public java.lang.String getDevSerial() { return devSerial_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasAlbumId()) {
          output.writeInt32(1, getAlbumId());
        }
        if (hasAlbumNum()) {
          output.writeString(2, getAlbumNum());
        }
        if (hasSongId()) {
          output.writeString(3, getSongId());
        }
        if (hasSongCount()) {
          output.writeInt32(4, getSongCount());
        }
        if (hasDevSerial()) {
          output.writeString(5, getDevSerial());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasAlbumId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, getAlbumId());
        }
        if (hasAlbumNum()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getAlbumNum());
        }
        if (hasSongId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(3, getSongId());
        }
        if (hasSongCount()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, getSongCount());
        }
        if (hasDevSerial()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(5, getDevSerial());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage result;
        
        // Construct using sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage();
          return builder;
        }
        
        protected sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.getDescriptor();
        }
        
        public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage getDefaultInstanceForType() {
          return sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage) {
            return mergeFrom((sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage other) {
          if (other == sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.getDefaultInstance()) return this;
          if (other.hasAlbumId()) {
            setAlbumId(other.getAlbumId());
          }
          if (other.hasAlbumNum()) {
            setAlbumNum(other.getAlbumNum());
          }
          if (other.hasSongId()) {
            setSongId(other.getSongId());
          }
          if (other.hasSongCount()) {
            setSongCount(other.getSongCount());
          }
          if (other.hasDevSerial()) {
            setDevSerial(other.getDevSerial());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setAlbumId(input.readInt32());
                break;
              }
              case 18: {
                setAlbumNum(input.readString());
                break;
              }
              case 26: {
                setSongId(input.readString());
                break;
              }
              case 32: {
                setSongCount(input.readInt32());
                break;
              }
              case 42: {
                setDevSerial(input.readString());
                break;
              }
            }
          }
        }
        
        
        // optional int32 album_id = 1;
        public boolean hasAlbumId() {
          return result.hasAlbumId();
        }
        public int getAlbumId() {
          return result.getAlbumId();
        }
        public Builder setAlbumId(int value) {
          result.hasAlbumId = true;
          result.albumId_ = value;
          return this;
        }
        public Builder clearAlbumId() {
          result.hasAlbumId = false;
          result.albumId_ = 0;
          return this;
        }
        
        // optional string album_num = 2;
        public boolean hasAlbumNum() {
          return result.hasAlbumNum();
        }
        public java.lang.String getAlbumNum() {
          return result.getAlbumNum();
        }
        public Builder setAlbumNum(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasAlbumNum = true;
          result.albumNum_ = value;
          return this;
        }
        public Builder clearAlbumNum() {
          result.hasAlbumNum = false;
          result.albumNum_ = getDefaultInstance().getAlbumNum();
          return this;
        }
        
        // optional string song_id = 3;
        public boolean hasSongId() {
          return result.hasSongId();
        }
        public java.lang.String getSongId() {
          return result.getSongId();
        }
        public Builder setSongId(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasSongId = true;
          result.songId_ = value;
          return this;
        }
        public Builder clearSongId() {
          result.hasSongId = false;
          result.songId_ = getDefaultInstance().getSongId();
          return this;
        }
        
        // optional int32 song_count = 4;
        public boolean hasSongCount() {
          return result.hasSongCount();
        }
        public int getSongCount() {
          return result.getSongCount();
        }
        public Builder setSongCount(int value) {
          result.hasSongCount = true;
          result.songCount_ = value;
          return this;
        }
        public Builder clearSongCount() {
          result.hasSongCount = false;
          result.songCount_ = 0;
          return this;
        }
        
        // optional string dev_serial = 5;
        public boolean hasDevSerial() {
          return result.hasDevSerial();
        }
        public java.lang.String getDevSerial() {
          return result.getDevSerial();
        }
        public Builder setDevSerial(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasDevSerial = true;
          result.devSerial_ = value;
          return this;
        }
        public Builder clearDevSerial() {
          result.hasDevSerial = false;
          result.devSerial_ = getDefaultInstance().getDevSerial();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:UserDevAlbum.AlbumPackage)
      }
      
      static {
        defaultInstance = new AlbumPackage(true);
        sungeo.netmusic.protocol.AlbumSendPackage.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:UserDevAlbum.AlbumPackage)
    }
    
    // repeated .UserDevAlbum.AlbumPackage albumPak = 1;
    public static final int ALBUMPAK_FIELD_NUMBER = 1;
    private java.util.List<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage> albumPak_ =
      java.util.Collections.emptyList();
    public java.util.List<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage> getAlbumPakList() {
      return albumPak_;
    }
    public int getAlbumPakCount() { return albumPak_.size(); }
    public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage getAlbumPak(int index) {
      return albumPak_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage element : getAlbumPakList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage element : getAlbumPakList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum result;
      
      // Construct using sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum();
        return builder;
      }
      
      protected sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.getDescriptor();
      }
      
      public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum getDefaultInstanceForType() {
        return sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.albumPak_ != java.util.Collections.EMPTY_LIST) {
          result.albumPak_ =
            java.util.Collections.unmodifiableList(result.albumPak_);
        }
        sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum) {
          return mergeFrom((sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum other) {
        if (other == sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.getDefaultInstance()) return this;
        if (!other.albumPak_.isEmpty()) {
          if (result.albumPak_.isEmpty()) {
            result.albumPak_ = new java.util.ArrayList<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage>();
          }
          result.albumPak_.addAll(other.albumPak_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.Builder subBuilder = sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAlbumPak(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .UserDevAlbum.AlbumPackage albumPak = 1;
      public java.util.List<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage> getAlbumPakList() {
        return java.util.Collections.unmodifiableList(result.albumPak_);
      }
      public int getAlbumPakCount() {
        return result.getAlbumPakCount();
      }
      public sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage getAlbumPak(int index) {
        return result.getAlbumPak(index);
      }
      public Builder setAlbumPak(int index, sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.albumPak_.set(index, value);
        return this;
      }
      public Builder setAlbumPak(int index, sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.Builder builderForValue) {
        result.albumPak_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAlbumPak(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.albumPak_.isEmpty()) {
          result.albumPak_ = new java.util.ArrayList<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage>();
        }
        result.albumPak_.add(value);
        return this;
      }
      public Builder addAlbumPak(sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.Builder builderForValue) {
        if (result.albumPak_.isEmpty()) {
          result.albumPak_ = new java.util.ArrayList<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage>();
        }
        result.albumPak_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAlbumPak(
          java.lang.Iterable<? extends sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage> values) {
        if (result.albumPak_.isEmpty()) {
          result.albumPak_ = new java.util.ArrayList<sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage>();
        }
        super.addAll(values, result.albumPak_);
        return this;
      }
      public Builder clearAlbumPak() {
        result.albumPak_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:UserDevAlbum)
    }
    
    static {
      defaultInstance = new UserDevAlbum(true);
      sungeo.netmusic.protocol.AlbumSendPackage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:UserDevAlbum)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_UserDevAlbum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_UserDevAlbum_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_UserDevAlbum_AlbumPackage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_UserDevAlbum_AlbumPackage_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026AlbumSendPackage.proto\"\252\001\n\014UserDevAlbu" +
      "m\022,\n\010albumPak\030\001 \003(\0132\032.UserDevAlbum.Album" +
      "Package\032l\n\014AlbumPackage\022\020\n\010album_id\030\001 \001(" +
      "\005\022\021\n\talbum_num\030\002 \001(\t\022\017\n\007song_id\030\003 \001(\t\022\022\n" +
      "\nsong_count\030\004 \001(\005\022\022\n\ndev_serial\030\005 \001(\tB,\n" +
      "\030sungeo.netmusic.protocolB\020AlbumSendPack" +
      "age"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_UserDevAlbum_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_UserDevAlbum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_UserDevAlbum_descriptor,
              new java.lang.String[] { "AlbumPak", },
              sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.class,
              sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.Builder.class);
          internal_static_UserDevAlbum_AlbumPackage_descriptor =
            internal_static_UserDevAlbum_descriptor.getNestedTypes().get(0);
          internal_static_UserDevAlbum_AlbumPackage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_UserDevAlbum_AlbumPackage_descriptor,
              new java.lang.String[] { "AlbumId", "AlbumNum", "SongId", "SongCount", "DevSerial", },
              sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.class,
              sungeo.netmusic.protocol.AlbumSendPackage.UserDevAlbum.AlbumPackage.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
