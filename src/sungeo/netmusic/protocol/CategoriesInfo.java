// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CategoriesInfo.proto

package sungeo.netmusic.protocol;

public final class CategoriesInfo {
  private CategoriesInfo() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class CategoryList extends
      com.google.protobuf.GeneratedMessage {
    // Use CategoryList.newBuilder() to construct.
    private CategoryList() {
      initFields();
    }
    private CategoryList(boolean noInit) {}
    
    private static final CategoryList defaultInstance;
    public static CategoryList getDefaultInstance() {
      return defaultInstance;
    }
    
    public CategoryList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sungeo.netmusic.protocol.CategoriesInfo.internal_static_CategoryList_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sungeo.netmusic.protocol.CategoriesInfo.internal_static_CategoryList_fieldAccessorTable;
    }
    
    public static final class CategoryInfo extends
        com.google.protobuf.GeneratedMessage {
      // Use CategoryInfo.newBuilder() to construct.
      private CategoryInfo() {
        initFields();
      }
      private CategoryInfo(boolean noInit) {}
      
      private static final CategoryInfo defaultInstance;
      public static CategoryInfo getDefaultInstance() {
        return defaultInstance;
      }
      
      public CategoryInfo getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return sungeo.netmusic.protocol.CategoriesInfo.internal_static_CategoryList_CategoryInfo_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return sungeo.netmusic.protocol.CategoriesInfo.internal_static_CategoryList_CategoryInfo_fieldAccessorTable;
      }
      
      // optional int32 cat_id = 1;
      public static final int CAT_ID_FIELD_NUMBER = 1;
      private boolean hasCatId;
      private int catId_ = 0;
      public boolean hasCatId() { return hasCatId; }
      public int getCatId() { return catId_; }
      
      // optional string category_name = 2;
      public static final int CATEGORY_NAME_FIELD_NUMBER = 2;
      private boolean hasCategoryName;
      private java.lang.String categoryName_ = "";
      public boolean hasCategoryName() { return hasCategoryName; }
      public java.lang.String getCategoryName() { return categoryName_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasCatId()) {
          output.writeInt32(1, getCatId());
        }
        if (hasCategoryName()) {
          output.writeString(2, getCategoryName());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasCatId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, getCatId());
        }
        if (hasCategoryName()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getCategoryName());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo result;
        
        // Construct using sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo();
          return builder;
        }
        
        protected sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.getDescriptor();
        }
        
        public sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo getDefaultInstanceForType() {
          return sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo) {
            return mergeFrom((sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo other) {
          if (other == sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.getDefaultInstance()) return this;
          if (other.hasCatId()) {
            setCatId(other.getCatId());
          }
          if (other.hasCategoryName()) {
            setCategoryName(other.getCategoryName());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setCatId(input.readInt32());
                break;
              }
              case 18: {
                setCategoryName(input.readString());
                break;
              }
            }
          }
        }
        
        
        // optional int32 cat_id = 1;
        public boolean hasCatId() {
          return result.hasCatId();
        }
        public int getCatId() {
          return result.getCatId();
        }
        public Builder setCatId(int value) {
          result.hasCatId = true;
          result.catId_ = value;
          return this;
        }
        public Builder clearCatId() {
          result.hasCatId = false;
          result.catId_ = 0;
          return this;
        }
        
        // optional string category_name = 2;
        public boolean hasCategoryName() {
          return result.hasCategoryName();
        }
        public java.lang.String getCategoryName() {
          return result.getCategoryName();
        }
        public Builder setCategoryName(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasCategoryName = true;
          result.categoryName_ = value;
          return this;
        }
        public Builder clearCategoryName() {
          result.hasCategoryName = false;
          result.categoryName_ = getDefaultInstance().getCategoryName();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:CategoryList.CategoryInfo)
      }
      
      static {
        defaultInstance = new CategoryInfo(true);
        sungeo.netmusic.protocol.CategoriesInfo.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:CategoryList.CategoryInfo)
    }
    
    // repeated .CategoryList.CategoryInfo cat_info = 1;
    public static final int CAT_INFO_FIELD_NUMBER = 1;
    private java.util.List<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo> catInfo_ =
      java.util.Collections.emptyList();
    public java.util.List<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo> getCatInfoList() {
      return catInfo_;
    }
    public int getCatInfoCount() { return catInfo_.size(); }
    public sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo getCatInfo(int index) {
      return catInfo_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo element : getCatInfoList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo element : getCatInfoList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.CategoriesInfo.CategoryList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(sungeo.netmusic.protocol.CategoriesInfo.CategoryList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private sungeo.netmusic.protocol.CategoriesInfo.CategoryList result;
      
      // Construct using sungeo.netmusic.protocol.CategoriesInfo.CategoryList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new sungeo.netmusic.protocol.CategoriesInfo.CategoryList();
        return builder;
      }
      
      protected sungeo.netmusic.protocol.CategoriesInfo.CategoryList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new sungeo.netmusic.protocol.CategoriesInfo.CategoryList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sungeo.netmusic.protocol.CategoriesInfo.CategoryList.getDescriptor();
      }
      
      public sungeo.netmusic.protocol.CategoriesInfo.CategoryList getDefaultInstanceForType() {
        return sungeo.netmusic.protocol.CategoriesInfo.CategoryList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public sungeo.netmusic.protocol.CategoriesInfo.CategoryList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private sungeo.netmusic.protocol.CategoriesInfo.CategoryList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public sungeo.netmusic.protocol.CategoriesInfo.CategoryList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.catInfo_ != java.util.Collections.EMPTY_LIST) {
          result.catInfo_ =
            java.util.Collections.unmodifiableList(result.catInfo_);
        }
        sungeo.netmusic.protocol.CategoriesInfo.CategoryList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sungeo.netmusic.protocol.CategoriesInfo.CategoryList) {
          return mergeFrom((sungeo.netmusic.protocol.CategoriesInfo.CategoryList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(sungeo.netmusic.protocol.CategoriesInfo.CategoryList other) {
        if (other == sungeo.netmusic.protocol.CategoriesInfo.CategoryList.getDefaultInstance()) return this;
        if (!other.catInfo_.isEmpty()) {
          if (result.catInfo_.isEmpty()) {
            result.catInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo>();
          }
          result.catInfo_.addAll(other.catInfo_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.Builder subBuilder = sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCatInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .CategoryList.CategoryInfo cat_info = 1;
      public java.util.List<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo> getCatInfoList() {
        return java.util.Collections.unmodifiableList(result.catInfo_);
      }
      public int getCatInfoCount() {
        return result.getCatInfoCount();
      }
      public sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo getCatInfo(int index) {
        return result.getCatInfo(index);
      }
      public Builder setCatInfo(int index, sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.catInfo_.set(index, value);
        return this;
      }
      public Builder setCatInfo(int index, sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.Builder builderForValue) {
        result.catInfo_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCatInfo(sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.catInfo_.isEmpty()) {
          result.catInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo>();
        }
        result.catInfo_.add(value);
        return this;
      }
      public Builder addCatInfo(sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.Builder builderForValue) {
        if (result.catInfo_.isEmpty()) {
          result.catInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo>();
        }
        result.catInfo_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCatInfo(
          java.lang.Iterable<? extends sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo> values) {
        if (result.catInfo_.isEmpty()) {
          result.catInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo>();
        }
        super.addAll(values, result.catInfo_);
        return this;
      }
      public Builder clearCatInfo() {
        result.catInfo_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:CategoryList)
    }
    
    static {
      defaultInstance = new CategoryList(true);
      sungeo.netmusic.protocol.CategoriesInfo.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:CategoryList)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CategoryList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CategoryList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CategoryList_CategoryInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CategoryList_CategoryInfo_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024CategoriesInfo.proto\"s\n\014CategoryList\022," +
      "\n\010cat_info\030\001 \003(\0132\032.CategoryList.Category" +
      "Info\0325\n\014CategoryInfo\022\016\n\006cat_id\030\001 \001(\005\022\025\n\r" +
      "category_name\030\002 \001(\tB*\n\030sungeo.netmusic.p" +
      "rotocolB\016CategoriesInfo"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_CategoryList_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_CategoryList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CategoryList_descriptor,
              new java.lang.String[] { "CatInfo", },
              sungeo.netmusic.protocol.CategoriesInfo.CategoryList.class,
              sungeo.netmusic.protocol.CategoriesInfo.CategoryList.Builder.class);
          internal_static_CategoryList_CategoryInfo_descriptor =
            internal_static_CategoryList_descriptor.getNestedTypes().get(0);
          internal_static_CategoryList_CategoryInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CategoryList_CategoryInfo_descriptor,
              new java.lang.String[] { "CatId", "CategoryName", },
              sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.class,
              sungeo.netmusic.protocol.CategoriesInfo.CategoryList.CategoryInfo.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
