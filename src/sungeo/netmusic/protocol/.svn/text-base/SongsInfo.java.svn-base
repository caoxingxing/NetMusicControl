// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SongsInfo.proto

package sungeo.netmusic.protocol;

public final class SongsInfo {
  private SongsInfo() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class MusicInfoOfSingleCat extends
      com.google.protobuf.GeneratedMessage {
    // Use MusicInfoOfSingleCat.newBuilder() to construct.
    private MusicInfoOfSingleCat() {
      initFields();
    }
    private MusicInfoOfSingleCat(boolean noInit) {}
    
    private static final MusicInfoOfSingleCat defaultInstance;
    public static MusicInfoOfSingleCat getDefaultInstance() {
      return defaultInstance;
    }
    
    public MusicInfoOfSingleCat getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfoOfSingleCat_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfoOfSingleCat_fieldAccessorTable;
    }
    
    // optional int32 cat_id = 1;
    public static final int CAT_ID_FIELD_NUMBER = 1;
    private boolean hasCatId;
    private int catId_ = 0;
    public boolean hasCatId() { return hasCatId; }
    public int getCatId() { return catId_; }
    
    // repeated .MusicInfo music_info = 2;
    public static final int MUSIC_INFO_FIELD_NUMBER = 2;
    private java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo> musicInfo_ =
      java.util.Collections.emptyList();
    public java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo> getMusicInfoList() {
      return musicInfo_;
    }
    public int getMusicInfoCount() { return musicInfo_.size(); }
    public sungeo.netmusic.protocol.SongsInfo.MusicInfo getMusicInfo(int index) {
      return musicInfo_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCatId()) {
        output.writeInt32(1, getCatId());
      }
      for (sungeo.netmusic.protocol.SongsInfo.MusicInfo element : getMusicInfoList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCatId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCatId());
      }
      for (sungeo.netmusic.protocol.SongsInfo.MusicInfo element : getMusicInfoList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat result;
      
      // Construct using sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat();
        return builder;
      }
      
      protected sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.getDescriptor();
      }
      
      public sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat getDefaultInstanceForType() {
        return sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.musicInfo_ != java.util.Collections.EMPTY_LIST) {
          result.musicInfo_ =
            java.util.Collections.unmodifiableList(result.musicInfo_);
        }
        sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat) {
          return mergeFrom((sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat other) {
        if (other == sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.getDefaultInstance()) return this;
        if (other.hasCatId()) {
          setCatId(other.getCatId());
        }
        if (!other.musicInfo_.isEmpty()) {
          if (result.musicInfo_.isEmpty()) {
            result.musicInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo>();
          }
          result.musicInfo_.addAll(other.musicInfo_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCatId(input.readInt32());
              break;
            }
            case 18: {
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.Builder subBuilder = sungeo.netmusic.protocol.SongsInfo.MusicInfo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMusicInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 cat_id = 1;
      public boolean hasCatId() {
        return result.hasCatId();
      }
      public int getCatId() {
        return result.getCatId();
      }
      public Builder setCatId(int value) {
        result.hasCatId = true;
        result.catId_ = value;
        return this;
      }
      public Builder clearCatId() {
        result.hasCatId = false;
        result.catId_ = 0;
        return this;
      }
      
      // repeated .MusicInfo music_info = 2;
      public java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo> getMusicInfoList() {
        return java.util.Collections.unmodifiableList(result.musicInfo_);
      }
      public int getMusicInfoCount() {
        return result.getMusicInfoCount();
      }
      public sungeo.netmusic.protocol.SongsInfo.MusicInfo getMusicInfo(int index) {
        return result.getMusicInfo(index);
      }
      public Builder setMusicInfo(int index, sungeo.netmusic.protocol.SongsInfo.MusicInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.musicInfo_.set(index, value);
        return this;
      }
      public Builder setMusicInfo(int index, sungeo.netmusic.protocol.SongsInfo.MusicInfo.Builder builderForValue) {
        result.musicInfo_.set(index, builderForValue.build());
        return this;
      }
      public Builder addMusicInfo(sungeo.netmusic.protocol.SongsInfo.MusicInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.musicInfo_.isEmpty()) {
          result.musicInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo>();
        }
        result.musicInfo_.add(value);
        return this;
      }
      public Builder addMusicInfo(sungeo.netmusic.protocol.SongsInfo.MusicInfo.Builder builderForValue) {
        if (result.musicInfo_.isEmpty()) {
          result.musicInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo>();
        }
        result.musicInfo_.add(builderForValue.build());
        return this;
      }
      public Builder addAllMusicInfo(
          java.lang.Iterable<? extends sungeo.netmusic.protocol.SongsInfo.MusicInfo> values) {
        if (result.musicInfo_.isEmpty()) {
          result.musicInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo>();
        }
        super.addAll(values, result.musicInfo_);
        return this;
      }
      public Builder clearMusicInfo() {
        result.musicInfo_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:MusicInfoOfSingleCat)
    }
    
    static {
      defaultInstance = new MusicInfoOfSingleCat(true);
      sungeo.netmusic.protocol.SongsInfo.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:MusicInfoOfSingleCat)
  }
  
  public static final class MusicInfo extends
      com.google.protobuf.GeneratedMessage {
    // Use MusicInfo.newBuilder() to construct.
    private MusicInfo() {
      initFields();
    }
    private MusicInfo(boolean noInit) {}
    
    private static final MusicInfo defaultInstance;
    public static MusicInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public MusicInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfo_fieldAccessorTable;
    }
    
    public static final class SongInfo extends
        com.google.protobuf.GeneratedMessage {
      // Use SongInfo.newBuilder() to construct.
      private SongInfo() {
        initFields();
      }
      private SongInfo(boolean noInit) {}
      
      private static final SongInfo defaultInstance;
      public static SongInfo getDefaultInstance() {
        return defaultInstance;
      }
      
      public SongInfo getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfo_SongInfo_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return sungeo.netmusic.protocol.SongsInfo.internal_static_MusicInfo_SongInfo_fieldAccessorTable;
      }
      
      // optional int32 song_id = 1;
      public static final int SONG_ID_FIELD_NUMBER = 1;
      private boolean hasSongId;
      private int songId_ = 0;
      public boolean hasSongId() { return hasSongId; }
      public int getSongId() { return songId_; }
      
      // optional string song_singer = 2;
      public static final int SONG_SINGER_FIELD_NUMBER = 2;
      private boolean hasSongSinger;
      private java.lang.String songSinger_ = "";
      public boolean hasSongSinger() { return hasSongSinger; }
      public java.lang.String getSongSinger() { return songSinger_; }
      
      // optional string song_name = 3;
      public static final int SONG_NAME_FIELD_NUMBER = 3;
      private boolean hasSongName;
      private java.lang.String songName_ = "";
      public boolean hasSongName() { return hasSongName; }
      public java.lang.String getSongName() { return songName_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasSongId()) {
          output.writeInt32(1, getSongId());
        }
        if (hasSongSinger()) {
          output.writeString(2, getSongSinger());
        }
        if (hasSongName()) {
          output.writeString(3, getSongName());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasSongId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, getSongId());
        }
        if (hasSongSinger()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getSongSinger());
        }
        if (hasSongName()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(3, getSongName());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo result;
        
        // Construct using sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo();
          return builder;
        }
        
        protected sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.getDescriptor();
        }
        
        public sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo getDefaultInstanceForType() {
          return sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo) {
            return mergeFrom((sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo other) {
          if (other == sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.getDefaultInstance()) return this;
          if (other.hasSongId()) {
            setSongId(other.getSongId());
          }
          if (other.hasSongSinger()) {
            setSongSinger(other.getSongSinger());
          }
          if (other.hasSongName()) {
            setSongName(other.getSongName());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setSongId(input.readInt32());
                break;
              }
              case 18: {
                setSongSinger(input.readString());
                break;
              }
              case 26: {
                setSongName(input.readString());
                break;
              }
            }
          }
        }
        
        
        // optional int32 song_id = 1;
        public boolean hasSongId() {
          return result.hasSongId();
        }
        public int getSongId() {
          return result.getSongId();
        }
        public Builder setSongId(int value) {
          result.hasSongId = true;
          result.songId_ = value;
          return this;
        }
        public Builder clearSongId() {
          result.hasSongId = false;
          result.songId_ = 0;
          return this;
        }
        
        // optional string song_singer = 2;
        public boolean hasSongSinger() {
          return result.hasSongSinger();
        }
        public java.lang.String getSongSinger() {
          return result.getSongSinger();
        }
        public Builder setSongSinger(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasSongSinger = true;
          result.songSinger_ = value;
          return this;
        }
        public Builder clearSongSinger() {
          result.hasSongSinger = false;
          result.songSinger_ = getDefaultInstance().getSongSinger();
          return this;
        }
        
        // optional string song_name = 3;
        public boolean hasSongName() {
          return result.hasSongName();
        }
        public java.lang.String getSongName() {
          return result.getSongName();
        }
        public Builder setSongName(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasSongName = true;
          result.songName_ = value;
          return this;
        }
        public Builder clearSongName() {
          result.hasSongName = false;
          result.songName_ = getDefaultInstance().getSongName();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:MusicInfo.SongInfo)
      }
      
      static {
        defaultInstance = new SongInfo(true);
        sungeo.netmusic.protocol.SongsInfo.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:MusicInfo.SongInfo)
    }
    
    // optional int32 ablum_id = 1;
    public static final int ABLUM_ID_FIELD_NUMBER = 1;
    private boolean hasAblumId;
    private int ablumId_ = 0;
    public boolean hasAblumId() { return hasAblumId; }
    public int getAblumId() { return ablumId_; }
    
    // repeated .MusicInfo.SongInfo song_info = 2;
    public static final int SONG_INFO_FIELD_NUMBER = 2;
    private java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo> songInfo_ =
      java.util.Collections.emptyList();
    public java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo> getSongInfoList() {
      return songInfo_;
    }
    public int getSongInfoCount() { return songInfo_.size(); }
    public sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo getSongInfo(int index) {
      return songInfo_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAblumId()) {
        output.writeInt32(1, getAblumId());
      }
      for (sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo element : getSongInfoList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAblumId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getAblumId());
      }
      for (sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo element : getSongInfoList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static sungeo.netmusic.protocol.SongsInfo.MusicInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(sungeo.netmusic.protocol.SongsInfo.MusicInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private sungeo.netmusic.protocol.SongsInfo.MusicInfo result;
      
      // Construct using sungeo.netmusic.protocol.SongsInfo.MusicInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new sungeo.netmusic.protocol.SongsInfo.MusicInfo();
        return builder;
      }
      
      protected sungeo.netmusic.protocol.SongsInfo.MusicInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new sungeo.netmusic.protocol.SongsInfo.MusicInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sungeo.netmusic.protocol.SongsInfo.MusicInfo.getDescriptor();
      }
      
      public sungeo.netmusic.protocol.SongsInfo.MusicInfo getDefaultInstanceForType() {
        return sungeo.netmusic.protocol.SongsInfo.MusicInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public sungeo.netmusic.protocol.SongsInfo.MusicInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private sungeo.netmusic.protocol.SongsInfo.MusicInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public sungeo.netmusic.protocol.SongsInfo.MusicInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.songInfo_ != java.util.Collections.EMPTY_LIST) {
          result.songInfo_ =
            java.util.Collections.unmodifiableList(result.songInfo_);
        }
        sungeo.netmusic.protocol.SongsInfo.MusicInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sungeo.netmusic.protocol.SongsInfo.MusicInfo) {
          return mergeFrom((sungeo.netmusic.protocol.SongsInfo.MusicInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(sungeo.netmusic.protocol.SongsInfo.MusicInfo other) {
        if (other == sungeo.netmusic.protocol.SongsInfo.MusicInfo.getDefaultInstance()) return this;
        if (other.hasAblumId()) {
          setAblumId(other.getAblumId());
        }
        if (!other.songInfo_.isEmpty()) {
          if (result.songInfo_.isEmpty()) {
            result.songInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo>();
          }
          result.songInfo_.addAll(other.songInfo_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setAblumId(input.readInt32());
              break;
            }
            case 18: {
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.Builder subBuilder = sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSongInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 ablum_id = 1;
      public boolean hasAblumId() {
        return result.hasAblumId();
      }
      public int getAblumId() {
        return result.getAblumId();
      }
      public Builder setAblumId(int value) {
        result.hasAblumId = true;
        result.ablumId_ = value;
        return this;
      }
      public Builder clearAblumId() {
        result.hasAblumId = false;
        result.ablumId_ = 0;
        return this;
      }
      
      // repeated .MusicInfo.SongInfo song_info = 2;
      public java.util.List<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo> getSongInfoList() {
        return java.util.Collections.unmodifiableList(result.songInfo_);
      }
      public int getSongInfoCount() {
        return result.getSongInfoCount();
      }
      public sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo getSongInfo(int index) {
        return result.getSongInfo(index);
      }
      public Builder setSongInfo(int index, sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.songInfo_.set(index, value);
        return this;
      }
      public Builder setSongInfo(int index, sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.Builder builderForValue) {
        result.songInfo_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSongInfo(sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.songInfo_.isEmpty()) {
          result.songInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo>();
        }
        result.songInfo_.add(value);
        return this;
      }
      public Builder addSongInfo(sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.Builder builderForValue) {
        if (result.songInfo_.isEmpty()) {
          result.songInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo>();
        }
        result.songInfo_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSongInfo(
          java.lang.Iterable<? extends sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo> values) {
        if (result.songInfo_.isEmpty()) {
          result.songInfo_ = new java.util.ArrayList<sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo>();
        }
        super.addAll(values, result.songInfo_);
        return this;
      }
      public Builder clearSongInfo() {
        result.songInfo_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:MusicInfo)
    }
    
    static {
      defaultInstance = new MusicInfo(true);
      sungeo.netmusic.protocol.SongsInfo.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:MusicInfo)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MusicInfoOfSingleCat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MusicInfoOfSingleCat_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MusicInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MusicInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MusicInfo_SongInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MusicInfo_SongInfo_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017SongsInfo.proto\"F\n\024MusicInfoOfSingleCa" +
      "t\022\016\n\006cat_id\030\001 \001(\005\022\036\n\nmusic_info\030\002 \003(\0132\n." +
      "MusicInfo\"\212\001\n\tMusicInfo\022\020\n\010ablum_id\030\001 \001(" +
      "\005\022&\n\tsong_info\030\002 \003(\0132\023.MusicInfo.SongInf" +
      "o\032C\n\010SongInfo\022\017\n\007song_id\030\001 \001(\005\022\023\n\013song_s" +
      "inger\030\002 \001(\t\022\021\n\tsong_name\030\003 \001(\tB%\n\030sungeo" +
      ".netmusic.protocolB\tSongsInfo"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_MusicInfoOfSingleCat_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_MusicInfoOfSingleCat_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MusicInfoOfSingleCat_descriptor,
              new java.lang.String[] { "CatId", "MusicInfo", },
              sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.class,
              sungeo.netmusic.protocol.SongsInfo.MusicInfoOfSingleCat.Builder.class);
          internal_static_MusicInfo_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_MusicInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MusicInfo_descriptor,
              new java.lang.String[] { "AblumId", "SongInfo", },
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.class,
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.Builder.class);
          internal_static_MusicInfo_SongInfo_descriptor =
            internal_static_MusicInfo_descriptor.getNestedTypes().get(0);
          internal_static_MusicInfo_SongInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MusicInfo_SongInfo_descriptor,
              new java.lang.String[] { "SongId", "SongSinger", "SongName", },
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.class,
              sungeo.netmusic.protocol.SongsInfo.MusicInfo.SongInfo.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
